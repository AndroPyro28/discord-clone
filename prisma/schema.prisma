// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  // this is Profile in tutorial but we change it to user model
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  members  Member[]
  channels Channel[]
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relation
  userId                 String
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  conversationsInitiated Conversation[] @relation("memberOne")
  conversationsReceived  Conversation[] @relation("memberTwo")
  messages               Message[]
  directMessages DirectMessage[]
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  deleted   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String          @id @default(uuid())
  memberOneId   String
  memberOne     Member          @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId   String
  memberTwo     Member          @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  deleted   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  }

// necessary for next auth

model Profile {
  id       String  @id @default(uuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String? @db.Text
  imageUrl String  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  name           String?   @db.Text
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  profile  Profile?
  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
